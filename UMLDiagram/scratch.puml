@startuml
class Main{
    +{static}Init(lib : Library, br : BufferedReader) : void
    +{static}main()
}
note left of Main : 處理初始化\n獲取Library\n進入主迴圈等待輸入\n調用Library的方法處理指令

package controller #DDDDDD{
    class Library{
        +users : HashMap<String, User>
        +books : LinkedHashMap<Integer, Book>
        +commandErrorList : HashMap<String,String>
        {static}-instance : Library
        +br : BufferedReader

        {method}<<Singleton>>
        -Library()
        {static}+getInstance() : Library
        +processTransaction(cmdStr : String, br : BufferedReader) : int
    }
    note left of Library : 透過Map可利用鍵快速查找元素\nLinkedHashMap有可預知的迭代順序\n解決列出書要照ID排的問題
    note bottom of Library : processTransaction方法用來\n拆分輸入的指令，呼叫工廠構造指令類\n並使用設計好的命令模式執行指令
    note right of Library : 關於processTransaction函數\nAnalyze a single command,\nwhere the supported command format is\n\n[invoker] command [...parameters].\n\nTherefore, the standard processing can be applied uniformly.\nIf the invoker has the permission to execute the command,\nthe command execution is handled by the invoking class.\n\n@param cmdStr : a single line instruction which the type is String\n@return  0 if run successfully, -1 if parsing failed.

    class CommandFactory{
        +{static}createCommand(cmdStr : String) : Command
    }
}

package object{
    enum Permission{
        Borrower,Staff
    }
    class User<<Invoker>>{
        -userName : String
        -userType : Permission
        -predefinedBorrowBookNumber : Integer
        -cmd : Command
        +getUserName() : String
        +getPreDefinedBorrowBookNumber() : Integer
        +setPreDefinedBorrowBookNumber() : void
        +setCommand(cmd : Command) : void
        +invoke() : void
    }


    class Book{
        -bookID : Integer
        -bookAuthor : String
        -bookSubject : String
        -borrowed : boolean
        -borrowedBy : User

        +getBookID() : Integer
        +getAuthor() : String
        +getSubject() : String
        +isBorrowed() : boolean
        +getBorrowedBy : User
        +doBorrowed() : void
        +doReturn() : void
        +equals(o : Object) : boolean
        +hashCode() : int
    }
}



package "command"{
    interface Command<< 指令接口 >>{
        execute(invoker : User, arg : String) : void
    }
    class ConfirmDecorator << Decorator >> implements Command{
        -cmd : Command
        -msg : String

        +isStaff(user : User) : boolean
        +hasConfirm(invoker : User, arg : String) : boolean
        {method}<<Override>>
        +execute(invoker : User, arg : String) : void
        +getCommandPermissionLevel() : CommandPermissionLevel;
        +getPermissionDeniedMsg() : String
    }
    enum CommandPermissionLevel{
        Staff,Self,Borrower
    }
    class AddBook implements Command{
        p : CommandPermissionLevel
        permissionDeniedMsg : String

        {method}<<Override>>
        +execute(invoker : User, arg : String) : void
        +getCommandPermissionLevel() : CommandPermissionLevel;
        +getPermissionDeniedMsg() : String
    }

    class RemoveBook implements Command{
        p : CommandPermissionLevel
        permissionDeniedMsg : String

        {method}<<Override>>
        +execute(invoker : User, arg : String) : void
        +getCommandPermissionLevel() : CommandPermissionLevel;
        +getPermissionDeniedMsg() : String
    }

    class Checkout implements Command{
        p : CommandPermissionLevel
        permissionDeniedMsg : String

        {method}<<Override>>
        +execute(invoker : User, arg : String) : void
        +getCommandPermissionLevel() : CommandPermissionLevel;
        +getPermissionDeniedMsg() : String
    }

    class Return implements Command{
        p : CommandPermissionLevel
        permissionDeniedMsg : String

        {method}<<Override>>
        +execute(invoker : User, arg : String) : void
        +getCommandPermissionLevel() : CommandPermissionLevel;
        +getPermissionDeniedMsg() : String
    }

    class ListAuthor implements Command{
        p : CommandPermissionLevel
        permissionDeniedMsg : String

        {method}<<Override>>
        +execute(invoker : User, arg : String) : void
        +getCommandPermissionLevel() : CommandPermissionLevel;
        +getPermissionDeniedMsg() : String
    }

    class ListSubject implements Command{
        p : CommandPermissionLevel
        permissionDeniedMsg : String

        {method}<<Override>>
        +execute(invoker : User, arg : String) : void
        +getCommandPermissionLevel() : CommandPermissionLevel;
        +getPermissionDeniedMsg() : String
    }

    class FindChecked implements Command{
        p : CommandPermissionLevel
        permissionDeniedMsg : String

        {method}<<Override>>
        +execute(invoker : User, arg : String) : void
        +getCommandPermissionLevel() : CommandPermissionLevel;
        +getPermissionDeniedMsg() : String
    }

    class FindBorrower implements Command{
        p : CommandPermissionLevel
        permissionDeniedMsg : String

        {method}<<Override>>
        +execute(invoker : User, arg : String) : void
        +getCommandPermissionLevel() : CommandPermissionLevel;
        +getPermissionDeniedMsg() : String
    }
}

package exception #FFFFFF{
    Exception RuntimeException{
        <<運行期異常類>>
        {method}<<在Java lang包中>>
    }
    Exception BookCheckoutException extends RuntimeException{
        <<借書/還書異常時被拋出>>
    }
    Exception ExceedLimitationException extends RuntimeException{
        <<Borrower借書超過數量時被拋出>>
    }
    Exception PermissionDeniedException extends RuntimeException{
        <<Invoker無權執行指令時被拋出>>
    }
}

Main ..> Library
Library -- Command
Library *---> Book
Library *---> User
Library ..> CommandFactory
CommandFactory ..> Command
User *-> Priority
User ..> Command
User -- exception
ConfirmDecorator o- Command
Command -> CommandPermissionLevel
@enduml
